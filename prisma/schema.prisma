generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  role          Role      @default(OWNER)
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  boats        Boat[]
  sessions      Session[]
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Boat {
id             String  @id @unique @default(cuid())
name           String
image          String?
maxPeople      Int?
user           User?   @relation(fields: [userId], references: [id])
unaviableSlots Slot[]  
userId         String?
events        Event[]
services       Service[]
}

model Slot {
id     String  @id @unique @default(cuid())
from   Float?
to     Float?
boat   Boat?   @relation(fields: [boatId], references: [id])
boatId String?
}

model Event {
  id        String @id @unique @default(cuid())
  serviceSlug String
  from      Float?
  to        Float?
  people    Int?
  note      String?
  boatId    String
  clientId  String?
  skipperId String?
  canaleSlug String?
  boat   Boat?   @relation(fields: [boatId], references: [id])
}

model Service {
  id        String @id @unique @default(cuid())
  label     String
  slug     String
  boat   Boat[] 
}


model Canale {
  id        String @id @unique @default(cuid())
  label     String
  slug     String
}

enum Role {
  COLLABORATOR
  ADMIN
  OWNER
}


model Company {
id        String @id @unique @default(cuid())
name      String
employees User[]
}